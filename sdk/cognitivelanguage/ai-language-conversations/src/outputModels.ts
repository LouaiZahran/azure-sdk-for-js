// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

export interface AnalyzeConversationTaskResultOutputBase {
  kind: "AnalyzeConversationTaskResult" | "ConversationResult";
}

export interface ErrorResponseOutput {
  /** The error object. */
  error: ErrorModelOutput;
}

export interface ErrorModelOutput extends Record<string, unknown> {
  /** One of a server-defined set of error codes. */
  code:
    | "InvalidRequest"
    | "InvalidArgument"
    | "Unauthorized"
    | "Forbidden"
    | "NotFound"
    | "ProjectNotFound"
    | "OperationNotFound"
    | "AzureCognitiveSearchNotFound"
    | "AzureCognitiveSearchIndexNotFound"
    | "TooManyRequests"
    | "AzureCognitiveSearchThrottling"
    | "AzureCognitiveSearchIndexLimitReached"
    | "InternalServerError"
    | "ServiceUnavailable"
    | "Timeout"
    | "QuotaExceeded"
    | "Conflict"
    | "Warning";
  /** A human-readable representation of the error. */
  message: string;
  /** The target of the error. */
  target?: string;
  /** An array of details about specific errors that led to this reported error. */
  details?: Array<ErrorModelOutput>;
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerErrorModelOutput;
}

export interface InnerErrorModelOutput {
  /** One of a server-defined set of error codes. */
  code:
    | "InvalidRequest"
    | "InvalidParameterValue"
    | "KnowledgeBaseNotFound"
    | "AzureCognitiveSearchNotFound"
    | "AzureCognitiveSearchThrottling"
    | "ExtractionFailure"
    | "InvalidRequestBodyFormat"
    | "EmptyRequest"
    | "MissingInputDocuments"
    | "InvalidDocument"
    | "ModelVersionIncorrect"
    | "InvalidDocumentBatch"
    | "UnsupportedLanguageCode"
    | "InvalidCountryHint";
  /** Error message. */
  message: string;
  /** Error details. */
  details?: Record<string, string>;
  /** Error target. */
  target?: string;
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerErrorModelOutput;
}

export interface AnalyzeConversationLROTaskOutputBase
  extends TaskIdentifierOutput {
  kind:
    | "AnalyzeConversationLROTask"
    | "ConversationalPIITask"
    | "ConversationalSummarizationTask";
}

export interface TaskIdentifierOutput {
  taskName?: string;
}

export interface AnalyzeConversationJobStateOutput
  extends JobStateAutoGeneratedOutput,
    ConversationTasksStateOutput,
    AnalyzeConversationJobStatisticsOutput {}

export interface JobStateAutoGeneratedOutput {
  displayName?: string;
  createdDateTime: string;
  expirationDateTime?: string;
  jobId: string;
  lastUpdatedDateTime: string;
  status:
    | "notStarted"
    | "running"
    | "succeeded"
    | "partiallyCompleted"
    | "failed"
    | "cancelled"
    | "cancelling";
  errors?: Array<ErrorModelOutput>;
  nextLink?: string;
}

export interface ConversationTasksStateOutput {
  tasks: ConversationTasksStateTasksOutput;
}

export interface ConversationTasksStateTasksOutput {
  /** Count of tasks completed successfully. */
  completed: number;
  /** Count of tasks that failed. */
  failed: number;
  /** Count of tasks in progress currently. */
  inProgress: number;
  /** Total count of tasks submitted as part of the job. */
  total: number;
  /** List of results from tasks (if available). */
  items?: Array<AnalyzeConversationJobResultOutput>;
}

export interface AnalyzeConversationJobResultOutputBase
  extends TaskStateAutoGeneratedOutput,
    TaskIdentifierOutput {
  kind:
    | "AnalyzeConversationJobResult"
    | "ConversationalPIIResults"
    | "ConversationalSummarizationResults";
}

export interface TaskStateAutoGeneratedOutput {
  /** The last updated time in UTC for the task. */
  lastUpdateDateTime: string;
  /** The status of the task at the mentioned last update time. */
  status:
    | "notStarted"
    | "running"
    | "succeeded"
    | "failed"
    | "cancelled"
    | "cancelling";
}

export interface AnalyzeConversationJobStatisticsOutput {
  /** if showStats=true was specified in the request this field will contain information about the request payload. */
  statistics?: ConversationRequestStatisticsOutput;
}

export interface ConversationRequestStatisticsOutput
  extends RequestStatisticsOutput {
  /** Number of conversations submitted in the request. */
  conversationsCount: number;
  /** Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents. */
  validConversationsCount: number;
  /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */
  erroneousConversationsCount: number;
}

export interface RequestStatisticsOutput extends Record<string, unknown> {
  /** Number of transactions for the request. */
  transactionsCount: number;
}

export interface ConversationalTaskResultOutput
  extends AnalyzeConversationTaskResultOutputBase {
  /** Represents a conversation analysis response. */
  result: AnalyzeConversationResultOutput;
  kind: "ConversationResult";
}

export interface AnalyzeConversationResultOutput {
  /** The conversation utterance given by the caller. */
  query: string;
  /** The system detected language for the query in BCP 47 language representation.. */
  detectedLanguage?: string;
  /** The prediction result of a conversation project. */
  prediction: BasePredictionOutput;
}

export interface BasePredictionOutputBase {
  /** The intent with the highest score. */
  topIntent?: string;
  projectKind: "BasePrediction" | "Conversation" | "Orchestration";
}

export interface NoneLinkedTargetIntentResultOutput
  extends TargetIntentResultOutputBase {
  /** The actual response from a Conversation project. */
  result?: ConversationResultOutput;
  targetProjectKind: "NonLinked";
}

export interface ConversationResultOutput {
  /** The same query given in request. */
  query: string;
  /** The detected language from the query in BCP 47 language representation.. */
  detectedLanguage?: string;
  /** The predicted result for the query. */
  prediction?: ConversationPredictionOutput;
}

export interface ConversationPredictionOutput extends BasePredictionOutputBase {
  /** The intent classification results. */
  intents: Array<ConversationIntentOutput>;
  /** The entity extraction results. */
  entities: Array<ConversationEntityOutput>;
  projectKind: "Conversation";
}

export interface ConversationIntentOutput {
  /** A predicted class. */
  category: string;
  /** The confidence score of the class from 0.0 to 1.0. */
  confidenceScore: number;
}

export interface ConversationEntityOutput {
  /** The entity category. */
  category: string;
  /** The predicted entity text. */
  text: string;
  /** The starting index of this entity in the query. */
  offset: number;
  /** The length of the text. */
  length: number;
  /** The entity confidence score. */
  confidenceScore: number;
  /** The collection of entity resolution objects. */
  resolutions?: Array<BaseResolutionOutput>;
  /** The collection of entity extra information objects. */
  extraInformation?: Array<BaseExtraInformationOutput>;
}

export interface BaseResolutionOutputBase {
  resolutionKind:
    | "BaseResolution"
    | "Age"
    | "Volume"
    | "Speed"
    | "Area"
    | "Length"
    | "Information"
    | "Temperature"
    | "Weight"
    | "Currency"
    | "Boolean"
    | "DateTime"
    | "Number"
    | "Ordinal"
    | "TemporalSpan"
    | "NumericRange";
}

export interface BaseExtraInformationOutputBase {
  extraInformationKind: "BaseExtraInformation" | "EntitySubtype" | "ListKey";
}

export interface TargetIntentResultOutputBase {
  /** The API version used to call a target service. */
  apiVersion?: string;
  /** The prediction score and it ranges from 0.0 to 1.0. */
  confidenceScore: number;
  targetProjectKind:
    | "TargetIntentResult"
    | "NonLinked"
    | "Conversation"
    | "Luis"
    | "QuestionAnswering";
}

export interface OrchestrationPredictionOutput
  extends BasePredictionOutputBase {
  /** A dictionary that contains all intents. A key is an intent name and a value is its confidence score and target type. The top intent's value also contains the actual response from the target project. */
  intents: Record<string, TargetIntentResultOutput>;
  projectKind: "Orchestration";
}

export interface ConversationTargetIntentResultOutput
  extends TargetIntentResultOutputBase {
  /** The actual response from a Conversation project. */
  result?: ConversationResultOutput;
  targetProjectKind: "Conversation";
}

export interface EntitySubtypeOutput extends BaseExtraInformationOutputBase {
  /** The Subtype of an extracted entity type. */
  value?: string;
  extraInformationKind: "EntitySubtype";
}

export interface ListKeyOutput extends BaseExtraInformationOutputBase {
  /** The canonical form of the extracted entity. */
  key?: string;
  extraInformationKind: "ListKey";
}

export interface QuantityResolutionOutput {
  /** The numeric value that the extracted text denotes. */
  value: number;
}

export interface AgeResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The Age Unit of measurement */
  unit: "Unspecified" | "Year" | "Month" | "Week" | "Day";
  resolutionKind: "Age";
}

export interface VolumeResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The Volume Unit of measurement */
  unit:
    | "Unspecified"
    | "CubicMeter"
    | "CubicCentimeter"
    | "CubicMillimeter"
    | "Hectoliter"
    | "Decaliter"
    | "Liter"
    | "Centiliter"
    | "Milliliter"
    | "CubicYard"
    | "CubicInch"
    | "CubicFoot"
    | "CubicMile"
    | "FluidOunce"
    | "Teaspoon"
    | "Tablespoon"
    | "Pint"
    | "Quart"
    | "Cup"
    | "Gill"
    | "Pinch"
    | "FluidDram"
    | "Barrel"
    | "Minim"
    | "Cord"
    | "Peck"
    | "Bushel"
    | "Hogshead";
  resolutionKind: "Volume";
}

export interface SpeedResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The speed Unit of measurement */
  unit:
    | "Unspecified"
    | "MetersPerSecond"
    | "KilometersPerHour"
    | "KilometersPerMinute"
    | "KilometersPerSecond"
    | "MilesPerHour"
    | "Knot"
    | "FootPerSecond"
    | "FootPerMinute"
    | "YardsPerMinute"
    | "YardsPerSecond"
    | "MetersPerMillisecond"
    | "CentimetersPerMillisecond"
    | "KilometersPerMillisecond";
  resolutionKind: "Speed";
}

export interface AreaResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The area Unit of measurement */
  unit:
    | "Unspecified"
    | "SquareKilometer"
    | "SquareHectometer"
    | "SquareDecameter"
    | "SquareDecimeter"
    | "SquareMeter"
    | "SquareCentimeter"
    | "SquareMillimeter"
    | "SquareInch"
    | "SquareFoot"
    | "SquareMile"
    | "SquareYard"
    | "Acre";
  resolutionKind: "Area";
}

export interface LengthResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The length Unit of measurement */
  unit:
    | "Unspecified"
    | "Kilometer"
    | "Hectometer"
    | "Decameter"
    | "Meter"
    | "Decimeter"
    | "Centimeter"
    | "Millimeter"
    | "Micrometer"
    | "Nanometer"
    | "Picometer"
    | "Mile"
    | "Yard"
    | "Inch"
    | "Foot"
    | "LightYear"
    | "Pt";
  resolutionKind: "Length";
}

export interface InformationResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The information (data) Unit of measurement. */
  unit:
    | "Unspecified"
    | "Bit"
    | "Kilobit"
    | "Megabit"
    | "Gigabit"
    | "Terabit"
    | "Petabit"
    | "Byte"
    | "Kilobyte"
    | "Megabyte"
    | "Gigabyte"
    | "Terabyte"
    | "Petabyte";
  resolutionKind: "Information";
}

export interface TemperatureResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The temperature Unit of measurement. */
  unit: "Unspecified" | "Fahrenheit" | "Kelvin" | "Rankine" | "Celsius";
  resolutionKind: "Temperature";
}

export interface WeightResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The weight Unit of measurement. */
  unit:
    | "Unspecified"
    | "Kilogram"
    | "Gram"
    | "Milligram"
    | "Gallon"
    | "MetricTon"
    | "Ton"
    | "Pound"
    | "Ounce"
    | "Grain"
    | "PennyWeight"
    | "LongTonBritish"
    | "ShortTonUS"
    | "ShortHundredWeightUS"
    | "Stone"
    | "Dram";
  resolutionKind: "Weight";
}

export interface CurrencyResolutionOutput
  extends BaseResolutionOutputBase,
    QuantityResolutionOutput {
  /** The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name. */
  ISO4217?: string;
  /** The unit of the amount captured in the extracted entity */
  unit: string;
  resolutionKind: "Currency";
}

export interface BooleanResolutionOutput extends BaseResolutionOutputBase {
  value: boolean;
  resolutionKind: "Boolean";
}

export interface DateTimeResolutionOutput extends BaseResolutionOutputBase {
  /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
  timex: string;
  /** The DateTime SubKind */
  dateTimeSubKind: "Time" | "Date" | "DateTime" | "Duration" | "Set";
  /** The actual time that the extracted text denote. */
  value: string;
  /** An optional modifier of a date/time instance. */
  modifier?:
    | "AfterApprox"
    | "Before"
    | "BeforeStart"
    | "Approx"
    | "ReferenceUndefined"
    | "SinceEnd"
    | "AfterMid"
    | "Start"
    | "After"
    | "BeforeEnd"
    | "Until"
    | "End"
    | "Less"
    | "Since"
    | "AfterStart"
    | "BeforeApprox"
    | "Mid"
    | "More";
  resolutionKind: "DateTime";
}

export interface NumberResolutionOutput extends BaseResolutionOutputBase {
  /** The type of the extracted number entity. */
  numberKind:
    | "Integer"
    | "Decimal"
    | "Power"
    | "Fraction"
    | "Percent"
    | "Unspecified";
  /** A numeric representation of what the extracted text denotes. */
  value: string;
  resolutionKind: "Number";
}

export interface OrdinalResolutionOutput extends BaseResolutionOutputBase {
  /** The offset With respect to the reference (e.g., offset = -1 in "show me the second to last" */
  offset: string;
  /** The reference point that the ordinal number denotes. */
  relativeTo: "Current" | "End" | "Start";
  /** A simple arithmetic expression that the ordinal denotes. */
  value: string;
  resolutionKind: "Ordinal";
}

export interface TemporalSpanResolutionOutput extends BaseResolutionOutputBase {
  /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
  begin?: string;
  /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
  end?: string;
  /** An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations) */
  duration?: string;
  /** An optional modifier of a date/time instance. */
  modifier?:
    | "AfterApprox"
    | "Before"
    | "BeforeStart"
    | "Approx"
    | "ReferenceUndefined"
    | "SinceEnd"
    | "AfterMid"
    | "Start"
    | "After"
    | "BeforeEnd"
    | "Until"
    | "End"
    | "Less"
    | "Since"
    | "AfterStart"
    | "BeforeApprox"
    | "Mid"
    | "More";
  resolutionKind: "TemporalSpan";
}

export interface NumericRangeResolutionOutput extends BaseResolutionOutputBase {
  /** The kind of range that the resolution object represents. */
  rangeKind:
    | "Number"
    | "Speed"
    | "Weight"
    | "Length"
    | "Volume"
    | "Area"
    | "Age"
    | "Information"
    | "Temperature"
    | "Currency";
  /** The beginning value of  the interval. */
  minimum: number;
  /** The ending value of the interval. */
  maximum: number;
  resolutionKind: "NumericRange";
}

export interface LuisTargetIntentResultOutput
  extends TargetIntentResultOutputBase {
  /** The actual response from a LUIS Generally Available application. */
  result?: Record<string, unknown>;
  targetProjectKind: "Luis";
}

export interface QuestionAnsweringTargetIntentResultOutput
  extends TargetIntentResultOutputBase {
  /** The generated answer by a Question Answering KB. */
  result?: AnswersResultOutput;
  targetProjectKind: "QuestionAnswering";
}

export interface AnswersResultOutput {
  /** Represents Answer Result list. */
  answers?: Array<KnowledgeBaseAnswerOutput>;
}

export interface KnowledgeBaseAnswerOutput {
  /** List of questions associated with the answer. */
  questions?: Array<string>;
  /** Answer text. */
  answer?: string;
  /** Answer confidence score, value ranges from 0 to 1. */
  confidenceScore?: number;
  /** ID of the QnA result. */
  id?: number;
  /** Source of QnA result. */
  source?: string;
  /** Metadata associated with the answer, useful to categorize or filter question answers. */
  metadata?: Record<string, string>;
  /** Dialog associated with Answer. */
  dialog?: KnowledgeBaseAnswerDialogOutput;
  /** Answer span object of QnA with respect to user's question. */
  answerSpan?: AnswerSpanOutput;
}

export interface KnowledgeBaseAnswerDialogOutput {
  /** To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as search result for queries without context; otherwise, if false, ignores context and includes this QnA in search result. */
  isContextOnly?: boolean;
  /** List of prompts associated with the answer. */
  prompts?: Array<KnowledgeBaseAnswerPromptOutput>;
}

export interface KnowledgeBaseAnswerPromptOutput {
  /** Index of the prompt - used in ordering of the prompts. */
  displayOrder?: number;
  /** QnA ID corresponding to the prompt. */
  qnaId?: number;
  /** Text displayed to represent a follow up question prompt. */
  displayText?: string;
}

export interface AnswerSpanOutput {
  /** Predicted text of answer span. */
  text?: string;
  /** Predicted score of answer span, value ranges from 0 to 1. */
  confidenceScore?: number;
  /** The answer span offset from the start of answer. */
  offset?: number;
  /** The length of the answer span. */
  length?: number;
}

export interface AnalyzeConversationPIITaskOutput
  extends AnalyzeConversationLROTaskOutputBase {
  /** Supported parameters for a Conversational PII detection and redaction task. */
  parameters?: ConversationPIITaskParametersOutput;
  kind: "ConversationalPIITask";
}

export interface ConversationPIITaskParametersOutput
  extends PreBuiltTaskParametersOutput {
  /** Describes the PII categories to return for detection. If not provided, 'default' categories will be returned which will vary with the language. */
  piiCategories?: Array<
    | "Address"
    | "CreditCard"
    | "Email"
    | "Name"
    | "NumericIdentifier"
    | "PhoneNumber"
    | "All"
    | "Default"
  >;
  /** Flag to indicate if audio redaction is requested. By default audio redaction will not be performed. */
  includeAudioRedaction?: boolean;
  /** For transcript conversations, this parameter provides information regarding which content type (ITN, Text, Lexical, Masked ITN) should be used for entity detection. The details of the entities detected - like the offset, length and the text itself - will correspond to the text type selected here. */
  redactionSource?: "lexical" | "itn" | "maskedItn" | "text";
}

export interface PreBuiltTaskParametersOutput extends TaskParametersOutput {
  modelVersion?: string;
}

export interface TaskParametersOutput {
  loggingOptOut?: boolean;
}

export interface ConversationPIIItemResultOutput {
  id: string;
  /** The transcript content response generated by the service with all necessary personally identifiable information redacted. */
  redactedContent: RedactedTranscriptContentOutput;
  entities: Array<EntityOutput>;
}

export interface RedactedTranscriptContentOutput {
  /** The redacted output for inverse text normalized format input. */
  itn?: string;
  /** The redacted output for masked inverse text normalized format input. */
  maskedItn?: string;
  /** The redacted output for text (Microsoft's Speech to Text 'display') format input. */
  text?: string;
  /** The redacted output for lexical format input. */
  lexical?: string;
  /** The list of redacted audio segments. */
  audioTimings?: Array<AudioTimingOutput>;
}

export interface AudioTimingOutput {
  /** Offset from start of speech audio, in ticks. 1 tick = 100 ns. */
  offset?: number;
  /** Duration of word articulation, in ticks. 1 tick = 100 ns. */
  duration?: number;
}

export interface EntityOutput {
  /** Entity text as appears in the request. */
  text: string;
  /** Entity type. */
  category: string;
  /** (Optional) Entity sub type. */
  subcategory?: string;
  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */
  offset: number;
  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */
  length: number;
  /** Confidence score between 0 and 1 of the extracted entity. */
  confidenceScore: number;
}

export interface WordLevelTimingOutput extends AudioTimingOutput {
  /** The word recognized. */
  word?: string;
}

export interface AnalyzeConversationPIIResultOutput
  extends AnalyzeConversationJobResultOutputBase {
  /** The result from PII detection and redaction operation for each conversation. */
  results: ConversationPIIResultsOutput;
  kind: "ConversationalPIIResults";
}

export interface ConversationPIIResultsOutput extends PreBuiltResultOutput {
  conversations: Array<ConversationPIIResultsConversationsItemOutput>;
}

export interface ConversationPIIResultsConversationsItemOutput
  extends ConversationPIIResultOutput,
    ConversationResultBaseOutput {}

export interface ConversationPIIResultOutput {
  /** Enumeration of PII detection and redaction operation results for all the conversation items in a conversation. */
  conversationItems: Array<ConversationPIIItemResultOutput>;
}

export interface ConversationResultBaseOutput {
  /** Unique, non-empty conversation identifier. */
  id: string;
  /** Warnings encountered while processing document. */
  warnings: Array<InputWarningOutput>;
  /** If showStats=true was specified in the request this field will contain information about the conversation payload. */
  statistics?: ConversationStatisticsOutput;
}

export interface InputWarningOutput {
  /** Warning code. */
  code: string;
  /** Warning message. */
  message: string;
  /** A JSON pointer reference indicating the target object. */
  targetRef?: string;
}

export interface ConversationStatisticsOutput {
  /** Number of text units for the request. */
  transactionsCount: number;
}

export interface PreBuiltResultOutput {
  /** Errors by document id. */
  errors: Array<InputErrorOutput>;
  /** if showStats=true was specified in the request this field will contain information about the request payload. */
  statistics?: RequestStatisticsOutput;
  /** This field indicates which model is used for scoring. */
  modelVersion: string;
}

export interface InputErrorOutput {
  /** The ID of the input. */
  id: string;
  /** Error encountered. */
  error: ErrorModelOutput;
}

export interface AnalyzeConversationSummarizationTaskOutput
  extends AnalyzeConversationLROTaskOutputBase {
  /** Supported parameters for an conversational summarization task. */
  parameters?: ConversationSummarizationTaskParametersOutput;
  kind: "ConversationalSummarizationTask";
}

export interface ConversationSummarizationTaskParametersOutput
  extends PreBuiltTaskParametersOutput {
  summaryAspects: Array<"issue" | "resolution">;
}

export interface AnalyzeConversationSummarizationResultOutput
  extends AnalyzeConversationJobResultOutputBase {
  results: SummaryResultOutput;
  kind: "ConversationalSummarizationResults";
}

export interface SummaryResultOutput extends PreBuiltResultOutput {
  conversations: Array<SummaryResultConversationsItemOutput>;
}

export interface SummaryResultConversationsItemOutput
  extends ConversationsSummaryResultOutput,
    ConversationResultBaseOutput {}

export interface ConversationsSummaryResultOutput {
  summaries: Array<ConversationsSummaryResultSummariesItemOutput>;
}

export interface ConversationsSummaryResultSummariesItemOutput
  extends SummaryResultItemOutput {}

export interface SummaryResultItemOutput {
  aspect: string;
  text: string;
}

export type AnalyzeConversationTaskResultOutput = ConversationalTaskResultOutput;
export type AnalyzeConversationLROTaskOutput =
  | AnalyzeConversationPIITaskOutput
  | AnalyzeConversationSummarizationTaskOutput;
export type AnalyzeConversationJobResultOutput =
  | AnalyzeConversationPIIResultOutput
  | AnalyzeConversationSummarizationResultOutput;
export type BasePredictionOutput =
  | ConversationPredictionOutput
  | OrchestrationPredictionOutput;
export type BaseResolutionOutput =
  | AgeResolutionOutput
  | VolumeResolutionOutput
  | SpeedResolutionOutput
  | AreaResolutionOutput
  | LengthResolutionOutput
  | InformationResolutionOutput
  | TemperatureResolutionOutput
  | WeightResolutionOutput
  | CurrencyResolutionOutput
  | BooleanResolutionOutput
  | DateTimeResolutionOutput
  | NumberResolutionOutput
  | OrdinalResolutionOutput
  | TemporalSpanResolutionOutput
  | NumericRangeResolutionOutput;
export type BaseExtraInformationOutput = EntitySubtypeOutput | ListKeyOutput;
export type TargetIntentResultOutput =
  | NoneLinkedTargetIntentResultOutput
  | ConversationTargetIntentResultOutput
  | LuisTargetIntentResultOutput
  | QuestionAnsweringTargetIntentResultOutput;
